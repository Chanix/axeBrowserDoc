{"./":{"url":"./","title":"简介与说明","keywords":"","body":"axeBrowser 简介与说明 axeBrowser is a browser, automatically, extendedly, easily. axeBrowser 是一个浏览器，可以方便的进行功能扩展和自动化操作。 使用 JavaScript，HTML 和 CSS 快速搭建 Window 桌面应用程序，省下更多的时间用来陪伴、娱乐和成长。 免费下载 功能和特点 内置浏览器，提供 JavaScript 运行环境； 提供内置扩展对象供 JavaScript 调用，扩展功能； 多种运行模式（命令行模式、应用模式，调试模式）； Javascript 可操作所有 DOM、window 等浏览器中才有的对象。 用途和作用 axeBrowser 本质上是一个通过浏览器环境提供 javascript 运行环境的脚本执行工具，从某种意义上而言和 Electron 很类似。开发者可以使用 JavaScript，HTML 和 CSS 快速搭建 Window 桌面应用程序，省下更多的时间用来陪伴、娱乐和成长。 对作者而言，开发 axeBrowser 是为了满足自动化测试的需求； 一些用户用来自动化操作，提高工作效率； 一些用户用来运行和分发一些 javascript 应用； …… 具体能做什么，取决于您的想象力，您可以在范例中看到一些例子。 已知功能限制 axeBrowser 的功能限制主要源于两个方面，开发工具（32位程序）和内置的浏览器（miniblink）。 仅支持 Windows （xp 以上版本）； 不支持涉及视频、音频（不包括 flash 播放器）； 单个进程最大 2G 内存； 风险与安全漏洞 为了更好的实现功能扩展和自动化操作，axeBrowser 没有遵循浏览器的沙盒安全策略。对于安全软件来说，axeBrowser 既然是浏览器，而又存在调用本地资源的行为，那么就存在安全漏洞。因此很多杀毒和防护软件会报告存在病毒木马行为。这是软件的功能和运行机制决定的，并非含病毒。 axeBrowser 提供了脚本运行环境，但无法保证执行的脚本的功能和目的。如果 axeBrowser 执行了存在恶意代码的脚本，那么就会造成安全隐患，可能带来非常严重的后果。 许可与费用 axeBrowser 是免费软件，使用 MIT 协议。再次重申，对于本软件的使用和可能造成的后果请您自行承担。当然，如果您觉得对您有用，愿意请我喝杯茶，那会是一种更大的激励。 使用本软件即表明您已经明确了解风险并对可能造成的后果自行负责。正如用菜刀进行非法行为是使用者的问题，非刀的问题，更不是制造商的问题。 对于软件的使用和可能造成的后果，axeBrowser 不进行任何明示的或者暗示的担保，亦不承担任何责任和义务（无论是法律上的或者是道义上的）。 仅保证，尽可能开发并完善 axeBrowser。 更多信息 软件主页：http://www.axeBrowser.com Q 群: 422269945 "},"history.html":{"url":"history.html","title":"下载与历史","keywords":"","body":"下载与历史 正在进行中的工作： 升级 miniblink 和相关控件； 2021/01/18 新增与调整扩展： 文件系统 __AXE__.fsys 鼠标 __AXE__.mouse 修正命令行参数 proxy 处理错误，该错误导致无法正常设置代理服务器； 调整 __AXE__.exit()，更优雅的终结运行，避免咚咚咚，听着好烦~~； GitHub 下载 | gitee 下载 2020/10/22 修正装载提示窗体失败的错误； 改进伪随机数算法和种子设置，尽量的“真”随机一些； 继续修正 __AXE__.exit() 偶尔卡死，无法正常关闭应用的问题（嗯……继续……）； 提示捐助窗口，增加定时关闭功能，减少对流程的干扰； 重构代码，拆分功能类与模块，优化代码，不再那么面条了； 整理现有文档，部分扩展模块的调整和完善； GitHub 下载 | gitee 下载 2020/09/23 优化代码逻辑，减小程序体积； 修正处理 timeout 参数时的一处缺陷，该缺陷导致特定情况下程序无法退出； 新增与调整扩展： 控制台 __AXE__.console 字符串处理 __AXE__.string 脚本文件的简单保护，保护开发者； axeBrowser -toolkit protect_script -f 新增命令行小工具，通过命令行参数 toolkit 进行调用； 2020/07/22 版本升级至 1.0.4； 取消 CTRL+、CTRL-、CTRL0 对界面缩放的热键； 缩放有可能造成与开发者的意图相冲突； 界面应当由开发者来决定，不应画蛇添足； 可通过调用 \\_\\_AXE\\_\\_.setDpi 来设置缩放功能； 修正内部网页资源的引用错误； 完善并整理文档； 新增与调整扩展（此版本变化较大，请以最新文档为准）： 基础扩展 __AXE__； 控制台 __AXE__.console 自定义热键 __AXE__.hotkey； 剪贴板 __AXE__.clipboard 编码解码 __AXE__.crypt 对话框 __AXE__.dlg 环境变量 __AXE__.env 进程相关 __AXE__.process 文件系统 __AXE__.fsys 移除 window.external.axe； 2020/07/01 优化 app 运行模式下的窗体显示； 整理和完善运行流程、运行模式； 新增常用编码、加密算法，参见 __AXE__.crypt； 新增进程相关的扩展函数，参见 __AXE__.process； 2020/06/26 各位端午节快乐！ 版本升级至 1.0.3； 重构和整理代码； 取消 VLC 支持库的分发； axeBrowser 依然内置 VLC 支持，但不再分发支持库； 大部分场景不需要，完全支持必须再加上近百兆的库文件； 需要的用户请自行添加相应的库和支持文件； 取消 Flash 支持库的分发； axeBrowser 依然内置 Flash 支持，但不再分发支持库； Adobe 于 2020/12/31 取消 Flash 的支持与维护； 需要的用户请自行添加相应的库和支持文件； 修改完善内置网页内容； 2020/06/18 新增扩展： 获取当前进程id __AXE__.win.getProcessId 获取当前线程id __AXE__.win.getThreadId 获取环境变量 __AXE__.win.getenv 设置环境变量 __AXE__.win.setenv 增加环境变量 __AXE__.win.addenv 增加应用的图标（白板太难看，随便找了一个先顶上，有更好的请与我联系） 整理与规范内置页面（axe://）； 调整自动缩放策略，默认提供 dpi 自动缩放，通过命令行参数 nodpi 来设置取消； 完善运行流程，增加打开网址前执行脚本，新增命令行参数： 打开前脚本 prescript 打开前脚本入口 preentrypoint 优化 __AXE__.exec 的处理流程，原流程无必要的增加了脚本的控制难度； 2020/06/08 调整内嵌 miniblink 版本，提升健壮性； 原 20.3.3 存在经常性崩溃（win10下），事件查看器中一直报 node.dll 错误。 降级至 19.11.11 后明显的减少了崩溃； 但此两版本皆存在 cookies 处理错误，没有正确的处理等号； 导致某些站点出现 “cookies or request too large” 的情况，正在测试验证升级方案中。 扩展对象调用方式修改，在 JavaScript 中直接访问变量 __AXE__ 即可; 原因：window.external 已从 Web 标准中删除； window.external.axe 仍可使用，但请尽量使用新的调用方式，其将会在未来的版本中移除； 新增扩展：剪贴板； __AXE__.win.clip.read __AXE__.win.clip.write 2020/06/01 增加 VLC 支持（32位）； 提升稳定运行时间，查找崩溃原因； 修正命令行参数 referer 处理错误（该错误导致某些情况下设置失败）； 修正打开主页网址时，网址输入框显示延迟的错误； 增加命令行参数 dpi，提供自动缩放选择，改善高分辨率下的窗口显示； 完善设置窗口标题的处理逻辑，注册版将不再显示版本信息，便于二次开发应用的分发； 修正浏览器网址输入框的显示错误； 调整和美观窗体布局； 2020/05/25 修正标题显示网址错误； 增加 flash 支持（32位）； 取消读写文件时的路径限制（用户反馈既然可以绕过，何必再脱裤子放屁~~~）； 重构扩展功能 “设置窗口标题”； 重构 dll 与 控件 包装调用代码； 提升稳定运行时间（水平有限，导致未能无缝整合，程序运行一段时间后可能会随机崩溃出现）； 2020/05/21 增加命令行参数 width，指定浏览器的宽度； 增加命令行参数 height，指定浏览器的高度； 修正注册码可能验证失败的问题； 提升稳定运行时间（由于个人水平问题，程序运行一段时间后，有发生崩溃的情况）； 取消百度网盘提供下载； 2020/05/18 彻底重新整理和编译，初始化版本。 "},"how_to_run.html":{"url":"how_to_run.html","title":"运行流程","keywords":"","body":"运行流程 axeBrowser 运行流程如下： 应用初始化； 处理命令行参数，系统初始配置； 装载指定的外部资源，例如脚本； 按指定的运行模式，设置用户界面； 支持的运行模式：窗口模式、命令行模式、调试模式。 执行打开网址前脚本； 打开网址前脚本通过命令行参数 -prescript -preentrypoint 指定； 打开指定网址； 指定网址通过命令行参数 -home 指定，默认为 “axe://welcome”。 执行打开网址后脚本； 打开网址前脚本通过命令行参数 -script -entrypoint 指定； 等待用户操作，处理系统消息； 请注意： 本应用是一个窗口程序，因此运行后会等待用户关闭窗口，不会自动退出（）。 如欲退出，需要在 js 脚本中显式的调用 __AXE__.exit() 即可。 也可使用命令行 -timeout 指定运行一段时间后自动强制退出。 "},"args.html":{"url":"args.html","title":"命令行参数","keywords":"","body":"命令行参数 axeBrowser 在不断的更新和完善中，因此命令行参数也会有修改和增减。请随时关注最新的文档说明。 runas 指定运行模式，默认为 debug。 值 说明 console 命令行模式，仅显示终端字符界面窗口。主要在作为自动化工具时使用。 app 应用模式，图形窗口模式。不显示浏览器功能界面。主要在作为窗口应用时使用。 debug 调试模式，打开图形窗口，提供功能界面。主要在开发调试时使用。 home 指定自动首页网址，默认为 axeBrowser.com。完成初始化后，axeBrowser 会自动打开这个网址。 script 指定打开网址后执行的 JavaScript 脚本或 JavaScript 脚本列表。（文件名之间以 \",\" 或 \";\" 进行分隔。）默认为空。 打开首页后，axeBrowser 会按照先后顺序读取文件内容，并合并为一段代码在浏览器环境中的匿名函数中执行。 程序会在每个 js 文件内容的末尾加上 “\\n;\\n”，避免问题。 可以利用脚本列表，将不同功能的 JavaScript 代码放在不同的 js 文件中，以达到“模块化”的目的（注：打了双引号的，不是真的模块化）。 举个例子： axeBrowser -script js1.js,js2.js,js3.js js1.js __AXE__.log('this is js1.js') js2.js __AXE__.log('this is js2.js'); js3.js __AXE__.log('this is js3.js'); 最终合并并执行的 JavaScript 代码是： __AXE__.log('this is js1.js') ; __AXE__.log('this is js2.js'); ; __AXE__.log('this is js3.js'); ; entrypoint 指定 script 参数中欲调用的 JavaScript 入口函数的函数名，默认为空。该函数必须在 script 参数指明的脚本中被预先定义。入口函数不支持参数。 举个例子： axeBrowser -script js1.js -entrypoint doStart function fn_test_log(a, b) { __AXE__.log(a, b); } function doStart() { fn_test_log('111', '222'); } 最终合并并执行的 JavaScript 代码是： function fn_test_log(a, b) { __AXE__.log(a, b); } function doStart() { fn_test_log('111', '222'); } ; doStart(); prescript 指定打开网址前执行的 JavaScript 脚本或 JavaScript 脚本列表。 preentrypoint 指定打开网址前自动调用的 JavaScript 入口函数的函数名，默认为空。该函数必须在 prescript 参数指明的脚本中被预先定义。入口函数不支持参数。 referer 指定浏览器访问首页时使用的来源地址（即 header 中的 referer），默认为空。 useragent 指定访问资源时使用的用户代理标识。默认值为：默认内嵌浏览器控件的值 + axeBrowser/版本号。 proxy 指定访问资源时使用的代理服务器地址，默认为空（即不使用代理服务器）。 wait_mode 指定等待首页加载完毕的模式。axeBrowser 将在首页装载完毕后，进行后继的调用脚本、调用入口函数等工作。默认值为 waitdoc。 值 说明 nowait 不等待。 wait 指定本参数后，可以通过 -wait_url 和 -wait_timeout 来指定等待的网址和超时时间。默认 wait_url 为空，wait_timeout 为 5000 毫秒。 waitdoc 等 document 元素加载完毕。 注意，本参数需要按照具体使用环境来选择。详细说明请参见其他相关文档。举个例子：在很多动态装载的网页中， 虽然网页装载已经完成了，满足 waitdoc 条件，但还需运行 js 代码才有进一步的内容。在这种情况下，就可能需要使用 wait 模式来等待一段时间。 timeout 指定执行超时时间，单位为毫秒，默认为空。运行超过指定时间后将应用自动退出。超时时间从程序初始化完成后开始计算。 width 设置浏览器窗口的宽度。参数值为一个整数，取值范围为 100 ~ 65535。 height 设置浏览器窗口的高度。参数值为一个整数，取值范围为 100 ~ 65535。 nodpi 应用默认为开启 dpi 自动缩放以改善高分辨率下的显示。指定本参数则关闭 dpi 自动缩放功能。 help 显示简要帮助 toolkit 提供了一系列命令行工具 "},"js_native_api.html":{"url":"js_native_api.html","title":"JavaScript 扩展（Native API）","keywords":"","body":"JavaScript 扩展（Native API） axeBrowser 提供了扩展对象供 JavaScript 调用，通过该对象，提供了大量 JavaScript 原来无法实现的功能，例如本地资源的访问、跨域调用等等。 JavaScript 通过预设变量 “__AXE__” 获得该扩展对象。这个变量亦可作为判断是否 axeBrowser 环境的依据，VIP 版可以修改该预设变量的变量名。 例如： if ('undefined' == typeof(__AXE__) || null == __AXE__) { alert('请检查：当前运行环境似乎不是 axeBrowser ？'); } else { alert(__AXE__); } axeBrowser 在不断的更新和完善中，因此扩展也会有修改和增减。在进行修改和增减时，会尽量的保持兼容性，使原有的脚本无需进行修改。请随时关注最新的文档说明。 "},"AXE_core.html":{"url":"AXE_core.html","title":"__AXE__  （基础扩展）✔","keywords":"","body":"__AXE__ 基础功能。 __AXE__.clone 定义和用法 以当前的工作目录、命令行参数再启动（克隆）一个相同的实例。 __AXE__.clone() 返回值 null 实例 __AXE__.clone(); __AXE__.exit 定义和用法 发送程序终止消息，立即退出 axeBrowser。 __AXE__.exit() 返回值 null 实例 __AXE__.exit(); __AXE__.getArgv 定义和用法 用于提取执行 axeBrowser 时，指定的命令行参数值。 __AXE__.getArgv(arg_name) 参数 描述 arg_name 字符串，命令行参数的名称 返回值 指定命令行参数的值。若该指定名称的命令行参数不存在，返回 null。如果存在但没有赋值，返回 \"\"。 若调用参数未指定名称或名称为 \"\"，则返回整个命令行参数。 提示 由于特殊字符和命令行环境的存在，指定命令行参数时，请按实际情况进行转义。建议用双引号 “\"” 将参数值包含起来。 实例 命令行： axeBrowser -home axebrowser.com -p1 test1 -p2; 调用值 返回值 描述 __AXE__.getArgv('home') 'axebrowser.com' 指定了参数指定了值 __AXE__.getArgv('p1') 'test1' 指定了参数指定了值 __AXE__.getArgv('p2') '' 指定了参数，没有指定值，返回空字符串 __AXE__.getArgv('home') null 没有指定参数，返回 null __AXE__.getArgv() -home axebrowser.com -p1 test1 -p2 整个命令行参数 __AXE__.setHome 定义和用法 设置要打开的首页网址。可以通过在 prescript 中调用本方法来动态设置要打开的首页网址。 打开网址时，如果设置了首页则以设置为准，未设置以命令行参数 -home 为准，如果依然没有，则打开默认首页。 __AXE__.setHome(url) 参数 描述 url 首页网址 返回值 null 实例 __AXE__.setHome('axeBrowser.com'); __AXE__.setScripts 定义和用法 设置要打开网址后运行的脚本。可以通过在 prescript 中调用本方法来动态设置要执行的脚本。 执行网址后脚本时，如果调用设置了脚本则以设置为准，未设置以命令行参数 -script 为准。 __AXE__.setScripts(file_name) 参数 描述 file_name 脚本文件名 返回值 null 实例 __AXE__.setScripts('after.js'); 基础扩展，提供应用整体相关的功能。 __AXE__.setEntryPoint 定义和用法 设置要打开网址后运行的脚本的入口函数。可以通过在 prescript 中调用本方法来动态设置要执行的脚本入口函数。 执行网址后脚本时，如果调用设置了脚本则以设置为准，未设置以命令行参数 -entrypoint 为准。 __AXE__.setEntryPoint(fn_name) 参数 描述 fn_name 入口函数名 返回值 null 实例 __AXE__.setEntryPoint('entrypoint'); __AXE__.restart 定义和用法 重新启动当前应用。实际上，是先克隆（clone）一个新的副本，然后将原有的退出（exit）。 __AXE__. restart() 参数 描述 无 返回值 null 实例 __AXE__.restart(); __AXE__.toString 定义和用法 返回 __AXE__ 扩展对象的名称和版本信息。 __AXE__.toString() 参数 描述 无 返回值 返回 __AXE__ 扩展对象的名称和版本信息。 实例 alert(__AXE__); alert(__AXE__.toString()); "},"AXE_clipboard.html":{"url":"AXE_clipboard.html","title":"__AXE__.clipboard    （剪贴板）✔","keywords":"","body":"__AXE__.clipboard 剪贴板相关的功能。 __AXE__.clipboard.read 定义和用法 将指定的内容以字符串方式写入文件，可以指定追加或者覆盖模式。执行时会自动创建所需的所有文件夹。 __AXE__.clipboard.read(); 返回值 剪贴板中的内容（字符串）。 实例 __AXE__.clipboard.read(); __AXE__.clipboard.write 定义和用法 将指定的内容以字符串方式写入文件，可以指定追加或者覆盖模式。执行时会自动创建所需的所有文件夹。 __AXE__.clipboard.write(content); 参数 描述 content 要写入剪贴板的内容（字符串） 返回值 null 实例 __AXE__.clipboard.write('axeBrowser is great!'); "},"AXE_console.html":{"url":"AXE_console.html","title":"__AXE__.console    （主控窗口）✔","keywords":"","body":"__AXE__.console 主控台窗口相关的功能 __AXE__.console._COLOR_??? 主控台窗口颜色定义，可用于字符显示的前景色和背景色。 名称 说明 __AXE__.console._COLOR_BLUE 蓝色 __AXE__.console._COLOR_BLACK 黑色 __AXE__.console._COLOR_DARKBLUE 暗蓝色 __AXE__.console._COLOR_DARKGREEN 暗绿色 __AXE__.console._COLOR_DRAKCYAN 暗青色 __AXE__.console._COLOR_DARKRED 暗红色 __AXE__.console._COLOR_DARKMAGENTA 暗紫色 __AXE__.console._COLOR_DRAKYELLOW 暗黄色 __AXE__.console._COLOR_GRAY 灰色 __AXE__.console._COLOR_DARKGRAY 深灰色 __AXE__.console._COLOR_GREEN 绿色 __AXE__.console._COLOR_CYAN 青色 __AXE__.console._COLOR_RED 红色 __AXE__.console._COLOR_MAGENTA 紫色 __AXE__.console._COLOR_YELLOW 黄色 __AXE__.console._COLOR_WHITE 白色 __AXE__.console.clear 定义和用法 清屏。 __AXE__.console.clear(); 返回值 null 实例 __AXE__.console.clear(); __AXE__.console.close 定义和用法 关闭控制台 __AXE__.console.close(); 返回值 null 实例 __AXE__.console.close(); __AXE__.console.pause 定义和用法 暂停，按任意键继续（若当前主控台窗口未打开，则自动打开） __AXE__.console.pause(ifClose, text); 参数 描述 ifClose 按键后是否关闭主控台窗口，默认为 false text 提示内容，默认为 “请按任意键继续 ... ” 返回值 用户按键键码 实例 __AXE__.console.pause(); // 缩略形式，等价于 __AXE__.console.pause(false, '请按任意键继续 ... '); __AXE__.console.pause(true, '按任意键后继续并关闭主控台窗口'); __AXE__.console.pause(false, '按任意键后继续但不关闭主控台窗口'); __AXE__.console.getTitle 定义和用法 获取主控台窗口的窗口标题 __AXE__.console.getTitle(); 返回值 主控台窗口的窗口标题 实例 __AXE__.console.getTitle(); __AXE__.console.setTitle 定义和用法 设置主控台窗口的窗口标题（若当前主控台窗口未打开，则自动打开） __AXE__.console.setTitle(text); 参数 描述 text 欲设置的窗口标题内容，默认为空字符串 '' 返回值 null 实例 __AXE__.console.setTitle('新的主控台窗口标题'); __AXE__.console.open 定义和用法 打开主控台窗口，若已打开则不进行任何操作，默认启用 UTF-8 编码。 启用 UTF-8 编码在 win10 以下系统可能出现显示不正常的问题。 __AXE__.console.open(ifUtf8); 参数 描述 ifUtf8 是否启用 UTF-8 编码，默认为 true 返回值 null 实例 __AXE__.console.open(); // 等价于 __AXE__.console.open(true); __AXE__.console.open(true); // __AXE__.console.open(false); // __AXE__.console.log 定义和用法 在主控台窗口中显示日志。支持多个参数，显示时多个参数间使用制表符分隔，并且在最后换行。 （若当前主控台窗口未打开，则自动打开） __AXE__.console.log(p1, p2, p3 ...) 参数 描述 p1, p2, p3 ... 要显示的内容，可以为变量或者表达式 返回值 null 提示 如果参数不是字符串类型，那么将试图自动转换为字符串后再显示。 实例 脚本： __AXE__.console.log(); __AXE__.console.log('This is a string'); __AXE__.console.log(null); __AXE__.console.log('String', 12345, null, 4+5, 'Str'=='Str'); 输出： This is a string String 12345 null 9 true __AXE__.console.colorlog 定义和用法 用自定义前景色和背景色在主控台窗口中显示日志。 （若当前主控台窗口未打开，则自动打开） __AXE__.console.colorlog(text_color, back_color, p1, p2, p3 ...) 参数 描述 text_color 前景色 back_color 背景色 p1, p2, p3 ... 要显示的内容，可以为变量或者表达式 前景色和背景色，请使用 __AXE__.console 中以 _COLOR_ 开头的常量，例如：__AXE__.console._COLOR_RED。 背景色可以为 null，即使用当前的背景色。 除了可指定颜色，其他和 log 一致，不再赘述。 "},"AXE_crypt.html":{"url":"AXE_crypt.html","title":"__AXE__.crypt    （编码解码）✔","keywords":"","body":"__AXE__.crypt 所有编码解码相关的功能 __AXE__.crypt.aes.encrypt 定义和用法 用 aes 算法进行加密。 __AXE__.crypt.aes.encrypt(content, key); 参数 描述 content 要进行加密的字符串 key 密钥 返回值 经过加密的密文。 实例 __AXE__.crypt.aes.encrypt('contentToAES', 'secret'); __AXE__.crypt.aes.decrypt 定义和用法 用 aes 算法进行解密 __AXE__.crypt.aes.decrypt(content, key); 参数 描述 content 要进行解密的字符串 key 密钥 返回值 经过解密的明文。 实例 __AXE__.crypt.aes.decrypt('contentToAES', 'secret'); __AXE__.crypt.base64.encode 定义和用法 对字符串进行 base64 编码 __AXE__.crypt.base64.encode(content); 参数 描述 content 要编码的字符串 返回值 经过编码后的字符串 实例 __AXE__.crypt.base64.encode('contentToBase64'); __AXE__.crypt.base64.decode 定义和用法 对字符串进行 base64 解码 __AXE__.crypt.base64.decode(content); 参数 描述 content 要解码的字符串 返回值 经过解码后的字符串 实例 __AXE__.crypt.base64.decode('Y29udGVudFRvQmFzZTY0'); __AXE__.crypt.base64.encodeHex 定义和用法 对字符串进行 base64 编码，返回16进制编码。 __AXE__.crypt.base64.encodeHex(content); 参数 描述 content 要编码的字符串 返回值 经过编码后的字符串 实例 __AXE__.crypt.base64.encodeHex('contentToBase64'); __AXE__.crypt.base64.decodeHex 定义和用法 对16进制编码进行解码 __AXE__.crypt.base64.decodeHex(content); 参数 描述 content 要解码的字符串 返回值 经过解码后的字符串 实例 __AXE__.crypt.base64.decodeHex('63 6f 6e 74 65 6e 74 54 6f 42 61 73 65 36 34'); __AXE__.crypt.base64.encodeUrl 定义和用法 对网址字符串进行 base64 编码 __AXE__.crypt.base64.encodeUrl(content); 参数 描述 content 要编码的字符串 返回值 经过编码后的字符串 实例 __AXE__.crypt.base64.encodeUrl('http://axeBrowser.com'); __AXE__.crypt.base64.decodeUrl 定义和用法 对进行过编码的网址进行解码 __AXE__.crypt.base64.decodeUrl(content); 参数 描述 content 要解码的字符串 返回值 经过解码后的字符串 实例 __AXE__.crypt.base64.decodeUrl('aHR0cDovL2F4ZUJyb3dzZXIuY29t'); __AXE__.crypt.des.encrypt 定义和用法 用 des 算法进行加密。 __AXE__.crypt.des.encrypt(content, key); 参数 描述 content 要进行加密的字符串 key 密钥 返回值 经过加密的密文。 实例 __AXE__.crypt.des.encrypt('contentToDES', 'secret'); __AXE__.crypt.des.decrypt 定义和用法 用 des 算法进行解密 __AXE__.crypt.des.decrypt(content, key); 参数 描述 content 要进行解密的字符串 key 密钥 返回值 经过解密的明文。 实例 __AXE__.crypt.des.decrypt('contentToDES', 'secret'); __AXE__.crypt.md2 定义和用法 计算 MD2 值 __AXE__.crypt.md2(content, upperCase, if16bit); 参数 描述 content 要计算摘要的字符串，默认为空字符串 ''。 upperCase 返回结果是否为大写，默认为 false，即返回小写的摘要。 if16bit 是否返回16位结果，默认为 false，即返回32位的结果。 返回值 字符串，指定字符串的 MD2 值。 实例 __AXE__.crypt.md2('contentToMD2'); __AXE__.crypt.md4 定义和用法 计算 MD4 值 __AXE__.crypt.md4(content, upperCase, if16bit); 参数 描述 content 要计算摘要的字符串，默认为空字符串 ''。 upperCase 返回结果是否为大写，默认为 false，即返回小写的摘要。 if16bit 是否返回16位结果，默认为 false，即返回32位的结果。 返回值 字符串，指定字符串的 MD4 值。 实例 __AXE__.crypt.md4('contentToMD4'); __AXE__.crypt.md5 定义和用法 计算 MD5 值 __AXE__.crypt.md5(content, upperCase, if16bit); 参数 描述 content 要计算摘要的字符串，默认为空字符串 ''。 upperCase 返回结果是否为大写，默认为 false，即返回小写的摘要。 if16bit 是否返回16位结果，默认为 false，即返回32位的结果。 返回值 字符串，指定字符串的 MD5 值。 实例 __AXE__.crypt.md5('contentToMD5'); __AXE__.crypt.rc4.encrypt 定义和用法 用 rc4 算法进行加密。 __AXE__.crypt.rc4.encrypt(content, key); 参数 描述 content 要进行加密的字符串 key 密钥 返回值 经过加密的密文。 实例 __AXE__.crypt.rc4.encrypt('contentToRC4', 'secret'); __AXE__.crypt.rc4.decrypt 定义和用法 用 rc4 算法进行解密 __AXE__.crypt.rc4.decrypt(content, key); 参数 描述 content 要进行解密的字符串 key 密钥 返回值 经过解密的明文。 实例 __AXE__.crypt.rc4.decrypt('contentToRC4', 'secret'); __AXE__.crypt.sha1 定义和用法 计算 sha1 值 __AXE__.crypt.sha1(content, upperCase); 参数 描述 content 要计算摘要的字符串 upperCase 返回结果是否为大写，默认为 true，即大写。 返回值 字符串，指定字符串的 sha1 值。 实例 __AXE__.crypt.sha1('contentToSha1'); __AXE__.crypt.sha256 定义和用法 计算 sha256 值 __AXE__.crypt.sha1(content, upperCase); 参数 描述 content 要计算摘要的字符串 upperCase 返回结果是否为大写，默认为 true，即大写。 返回值 字符串，指定字符串的 sha256 值。 实例 __AXE__.crypt.sha256('contentToSha256'); __AXE__.crypt.sha384 定义和用法 计算 sha384 值 __AXE__.crypt.sha384(content, upperCase); 参数 描述 content 要计算摘要的字符串 upperCase 返回结果是否为大写，默认为 true，即大写。 返回值 字符串，指定字符串的 sha384 值。 实例 __AXE__.crypt.sha384('contentToSha384'); __AXE__.crypt.sha512 定义和用法 计算 sha512 值 __AXE__.crypt.sha512(content, upperCase); 参数 描述 content 要计算摘要的字符串 upperCase 返回结果是否为大写，默认为 true，即大写。 返回值 字符串，指定字符串的 sha512 值。 实例 __AXE__.crypt.sha512('contentToSha512'); __AXE__.crypt.zlib.gzCompress 定义和用法 使用 gzip 算法压缩字符串 __AXE__.crypt.zlib.gzCompress(content, level); 参数 描述 content 要压缩的字符串 level 压缩级别（从1到9）。1最快，9压缩比最大，默认为 8。 返回值 经过压缩后的字符串 实例 __AXE__.crypt.zlib.gzCompress('contentGzip'); __AXE__.crypt.zlib.gzCompress('contentGzip', 1); __AXE__.crypt.zlib.gzUncompress 定义和用法 使用 gzip 算法解压字符串 __AXE__.crypt.zlib.gzUncompress(content); 参数 描述 content 要解压的内容 返回值 经过解压后的内容 实例 __AXE__.crypt.zlib.gzUncompress('contentGzip'); quotedPrintable.encode quotedPrintable.decode "},"AXE_dlg.html":{"url":"AXE_dlg.html","title":"__AXE__.dlg      （对话框）✔","keywords":"","body":"__AXE__.dlg 各种常用的对话框，消息框等交互小窗口。 __AXE__.dlg.openFile 定义和用法 打开文件选择对话框，进行文件选择，并返回选取的文件名。 如果没有选择（退出）则返回 null。 __AXE__.dlg.openFile(fileType, title, filename) 参数 描述 fileType 文件类型 title 窗口标题 filename 默认选择的文件名 fileType 指定文件类型（后缀名），用“文件说明|通配符”的方式来说明，支持多个，中间用“|”分隔。 例如：“所有文件|*.*”、“所有文件|*.*|文本文件|*.txt”； 返回值 未选择（例如点击取消按钮或者按 ESC 键）返回 null，否则返回选取的文件名称。 实例 __AXE__.dlg.openFile('所有文件|*.*|文本文件|*.txt|JavaScript|*.js', '请选择文件', 'after.js'); __AXE__.dlg.openFile('所有文件|*.*|文本文件|*.txt|JavaScript|*.js', '请选择文件'); __AXE__.dlg.openFile(null, null, 'after.js'); __AXE__.dlg.openFileEx 定义和用法 打开文件选择对话框，进行文件选择，并返回选取的文件名数组，支持多选。 未选择（例如点击取消按钮或者按 ESC 键）返回 null。 __AXE__.dlg.openFileEx(fileType, title, dir) 参数 描述 fileType 文件类型 title 窗口标题 dir 默认文件夹 fileType 指定文件类型（后缀名），用“文件说明|通配符”的方式来说明，支持多个，中间用“|”分隔。 例如：“所有文件|*.*”、“所有文件|*.*|文本文件|*.txt”； 返回值 未选择（例如点击取消按钮或者按 ESC 键）返回 null。 否则返回数组，其中的元素为选取的文件名称。 实例 __AXE__.dlg.openFileEx('所有文件|*.*|文本文件|*.txt|JavaScript|*.js', '请选择文件'); __AXE__.dlg.saveFile 定义和用法 文件保存对话框，返回选取的文件名。 如果没有选择（退出）则返回 null。 __AXE__.dlg.saveFile(fileType, title, filename) 参数 描述 fileType 文件类型 title 窗口标题 filename 默认文件名 fileType 指定文件类型（后缀名），用“文件说明|通配符”的方式来说明，支持多个，中间用“|”分隔。 例如：“所有文件|*.*”、“所有文件|*.*|文本文件|*.txt”； 返回值 未选择（例如点击取消按钮或者按 ESC 键）返回 null。否则返回选取的文件名称。 实例 __AXE__.dlg.saveFile('所有文件|*.*|文本文件|*.txt|JavaScript|*.js', '请选择文件'); __AXE__.dlg.openDir 定义和用法 打开文件夹选择框，返回选取的文件夹名称。 如果没有选择（退出）则返回 null。 __AXE__.dlg.openDir(dir, title, label) 参数 描述 dir 文件夹名称 title 窗口标题 label 标题 返回值 取消 null 否则返回选取的文件夹名称。 实例 __AXE__.dlg.openDir(); __AXE__.dlg.openDirEx 定义和用法 打开文件夹选择框，返回选取的文件夹名称，支持多选。 如果没有选择（退出）则返回 null。 __AXE__.dlg.openDirEx(dir, title, label, multi) 参数 描述 dir 文件夹名称 title 窗口标题 label 标题 multi 是否多选 返回值 取消 null 否则返回选取的文件夹名称数组。 实例 __AXE__.dlg.openDirEx(); __AXE__.dlg.msgboxInfo 定义和用法 显示信息提示对话框，如果设定了超时时间，则超时自动关闭。 __AXE__.dlg.msgboxInfo(text, title, timeout) 参数 描述 text 提示信息内容 title 窗口标题 timeout 超时时间（毫秒） 返回值 1 实例 __AXE__.dlg.msgboxInfo(`显示的信息提示内容`, `信息提示窗口的标题`); __AXE__.dlg.msgboxInfo(`这个提示窗口 5 秒后自动关闭`, `信息提示窗口的标题`, 5000); __AXE__.dlg.msgboxErr 定义和用法 显示错误提示对话框 __AXE__.dlg.msgboxErr(text, title) 参数 描述 text 提示信息内容 title 窗口标题 返回值 1 实例 __AXE__.dlg.msgboxErr(`显示的信息提示内容`, `信息提示窗口的标题`); __AXE__.dlg.msgboxOkCancel 定义和用法 显示选择对话框，用户可以选择“确认”或“取消” __AXE__.dlg.msgboxOkCancel(text, title) 参数 描述 text 提示信息内容 title 窗口标题 返回值 用户选择确认返回 true，其他情况返回 false 实例 __AXE__.dlg.msgboxOkCancel(`显示的信息提示内容`, `信息提示窗口的标题`); "},"AXE_env.html":{"url":"AXE_env.html","title":"__AXE__.env      （环境变量）✔","keywords":"","body":"__AXE__.env 环境变量相关的功能。 __AXE__.env.get 定义和用法 获取环境变量值。 __AXE__.env.get(envname); 参数 描述 envname 环境变量的名称 返回值 指定环境变量值，若未指定返回空。 实例 __AXE__.console.log('环境变量 PATH：', __AXE__.env.get('path')); __AXE__.env.set 定义和用法 设置环境变量值。 __AXE__.env.set(envname, value); 参数 描述 envname 环境变量的名称 value 环境变量的值 返回值 设置环境变量。 实例 __AXE__.env.set('TTT', 'ttt'); __AXE__.env.add 定义和用法 设置环境变量值（仅当该环境变量不存在时）。 __AXE__.env.add(envname, value); 参数 描述 envname 环境变量的名称 value 环境变量的值 返回值 设置环境变量。 实例 __AXE__.env.add('TTT', 'ttt'); "},"AXE_fsys.html":{"url":"AXE_fsys.html","title":"__AXE__.fsys     （文件系统）","keywords":"","body":"__AXE__.fsys 文件系统相关的功能 __AXE__.fsys.canRead 定义和用法 指定文件是否可读 __AXE__.fsys.canRead(filename); 参数 描述 filename 文件名 返回值 可读返回 true，其他返回 false 实例 __AXE__.fsys.canRead('C:\\\\Windows\\\\regedit.exe'); __AXE__.fsys.canWrite 定义和用法 指定文件是否可写 __AXE__.fsys.canWrite(filename); 参数 描述 filename 文件名 返回值 可写返回 true，其他返回 false 实例 __AXE__.fsys.canWrite('C:\\\\Windows\\\\regedit.exe'); __AXE__.fsys.canReadWrite 定义和用法 指定文件是否可读写 __AXE__.fsys.canReadWrite(filename); 参数 描述 filename 文件名 返回值 可读写返回 true，其他返回 false 实例 __AXE__.fsys.canReadWrite('C:\\\\Windows\\\\regedit.exe'); __AXE__.fsys.exists 定义和用法 指定文件或文件夹是否存在 __AXE__.fsys.exists(filename); 参数 描述 filename 文件名或文件夹名 返回值 存在返回 true，其他返回 false 实例 __AXE__.fsys.exists('C:\\\\Windows\\\\'); __AXE__.fsys.exists('C:\\\\Windows\\\\regedit.exe'); __AXE__.fsys.exists('C:\\\\Windows.old\\\\'); __AXE__.fsys.isDir 定义和用法 指定的路径是否文件夹 __AXE__.fsys.isDir(filename); 参数 描述 filename 文件名或文件夹名 返回值 是文件夹返回 true，其他返回 false 实例 __AXE__.fsys.isDir('C:\\\\Windows\\\\'); __AXE__.fsys.isDir('C:\\\\Windows\\\\regedit.exe'); __AXE__.fsys.isFile 定义和用法 指定的路径是否文件夹 __AXE__.fsys.isFile(filename); 参数 描述 filename 文件名或文件夹名 返回值 是文件返回 true，其他返回 false 实例 __AXE__.fsys.isFile('C:\\\\Windows\\\\'); __AXE__.fsys.isFile('C:\\\\Windows\\\\regedit.exe'); __AXE__.fsys.isHidden 定义和用法 指定文件是否隐藏模式 __AXE__.fsys.isHidden(filename); 参数 描述 filename 文件名 返回值 文件为隐藏模式返回 true，其他返回 false 实例 __AXE__.fsys.isHidden('C:\\\\Windows\\\\regedit.exe'); __AXE__.fsys.isReadonly 定义和用法 指定文件是否只读模式 __AXE__.fsys.isReadonly(filename); 参数 描述 filename 文件名 返回值 文件为只读模式返回 true，其他返回 false 实例 __AXE__.fsys.isReadonly('C:\\\\Windows\\\\regedit.exe'); __AXE__.fsys.isSystemFile 定义和用法 指定文件是否为系统文件 __AXE__.fsys.isSystemFile(filename); 参数 描述 filename 文件名 返回值 文件为系统文件返回 true，其他返回 false 实例 __AXE__.fsys.isSystemFile('C:\\\\Windows\\\\regedit.exe'); __AXE__.fsys.fullpath 定义和用法 返回指定文件的全路径名 __AXE__.fsys.fullpath(filename); 参数 描述 filename 文件名 返回值 指定文件的全路径名 实例 __AXE__.fsys.fullpath('C:\\\\Windows\\\\regedit.exe'); __AXE__.fsys.listFiles 定义和用法 返回指定文件夹下符合要求的所有文件名称 __AXE__.fsys.listFiles(dir, wildcard, recursive); 参数 描述 dir 文件夹名 wildcard 文件名通配符 recursive 是否包含子文件夹 返回值 返回指定文件夹下符合要求的所有文件名称 实例 __AXE__.fsys.listFiles('C:\\\\Windows\\\\debug\\\\'); __AXE__.fsys.readFileToString 定义和用法 读取指定文件，以字符串形式返回其内容。 __AXE__.fsys.readFileToString(filename); 参数 描述 filename 文件名 返回值 文件内容（字符串） 实例 __AXE__.fsys.readFileToString('C:\\\\Windows\\\\System32\\\\drivers\\\\etc\\\\hosts'); __AXE__.fsys.writeStringToFile 定义和用法 将内容写入文件。 __AXE__.fsys.writeStringToFile(filename, content, ifAppend); 参数 描述 filename 文件名 content 写入的内容 ifAppend 是否追加模式，默认为否，即覆盖模式 返回值 成功返回 true，其他返回 false 实例 __AXE__.fsys.writeStringToFile('D:\\\\test.txt', 'this is a test', false); __AXE__.fsys.getUserDesktopDir 定义和用法 获取当前用户的桌面文件夹路径名。 __AXE__.fsys.getUserDesktopDir(); 返回值 前用户的桌面文件夹路径名 实例 __AXE__.fsys.getUserDesktopDir(); "},"AXE_hotkey.html":{"url":"AXE_hotkey.html","title":"__AXE__.hotkey   （应用热键）","keywords":"","body":"__AXE__.hotkey 通过本模块在 Javascript 中自定义热键和按下热键时要执行的脚本代码，脚本代码在匿名函数中运行。 由于实际环境不同，因此设置热键不一定成功。 热键名称请这样来定义【控制键+按键名称】，例如 “CTRL+C”，“ALT+F1” 等。如果不需要控制键则留空，例如 “+F1” 代表 F1 功能键单独按下。热键名称不区分大小写，建议根据自己的习惯来统一。 __AXE__.hotkey.set 定义和用法 定义某热键执行的脚本代码。 __AXE__.hotkey.set(key_name, script_code); 参数 描述 key_name 热键的名称 script_code 执行的代码 返回值 true 热键设置成功 false 热键设置失败 实例 __AXE__.hotkey.set('ctrl+s', `alert('CTRL+S 被按下');`); __AXE__.hotkey.unset 定义和用法 取消指定热键定义。 __AXE__.hotkey.unset(key_name); 参数 描述 key_name 热键的名称 返回值 无 实例 __AXE__.hotkey.unset('ctrl+s'); __AXE__.hotkey.isset 定义和用法 检查指定的热键是否已经定义 __AXE__.hotkey.isset(key_name); 参数 描述 key_name 热键的名称 返回值 true 已设置 false 未设置 实例 __AXE__.hotkey.isset('ctrl+s'); __AXE__.hotkey.clear 定义和用法 取消所有热键。 __AXE__.hotkey.clear(); 返回值 无 实例 __AXE__.hotkey.clear(); "},"AXE_mouse.html":{"url":"AXE_mouse.html","title":"__AXE__.mouse   （鼠标）✔","keywords":"","body":"__AXE__.mouse 鼠标相关的功能。 __AXE__.mouse.getPosX 定义和用法 返回当前鼠标所在点的X坐标。 __AXE__.mouse.getPosX(); 返回值 当前鼠标所在点的X坐标 实例 __AXE__.mouse.getPosX(); __AXE__.mouse.getPosY 定义和用法 返回当前鼠标所在点的Y坐标。 __AXE__.mouse.getPosY(); 返回值 当前鼠标所在点的Y坐标 实例 __AXE__.mouse.getPosY(); "},"AXE_string.html":{"url":"AXE_string.html","title":"__AXE__.string   （字符串）✔","keywords":"","body":"__AXE__.string 字符串处理相关功能 __AXE__.string.format 定义和用法 格式化字符串，提供类似其他语言中 %s %d 之类的格式化功能。 就个人而言，苦 js 无 string.format 久矣…… 参见 aardio 格式化字符串 __AXE__.string.format(format_str, ...); 参数 描述 format_str 格式字符串 ... 对应格式化字符串中的参数 返回值 返回经过格式化后的字符串 实例 __AXE__.string.format('This is test for %s 111 %s 222 %s', 'FORMAT', 'para1', 2); "},"AXE_process.html":{"url":"AXE_process.html","title":"__AXE__.process  （进程相关）✔","keywords":"","body":"__AXE__.process 进程相关的功能。 __AXE__.process.execAXE 定义和用法 异步调用，执行一个 axeBrowser 的实例。 该实例的执行文件为当前的 axeBrowser.exe，工作目录为 axeBrowser.exe 所在的文件夹。 通过 args 来传递调用时的命令行参数，默认为空字符串 ''。 __AXE__.process.execAXE(args); 参数 描述 args 命令行参数，默认为 ''。 返回值 调用成功返回 true，其他返回 false。 实例 __AXE__.process.execAXE(); __AXE__.process.execAXE('-home www.qq.com'); __AXE__.process.execAXE(__AXE__.getArgv()); 提示 请注意通过 args 传递命令行参数时的特殊字符处理，例如通过双引号包括参数值，具体请参阅 PowserShell、cmd 的相关文档。 __AXE__.process.execAXEWait 定义和用法 同步调用，执行一个 axeBrowser 的实例。当前应用将等待至该调用执行完毕后方才继续。 该实例的执行文件为当前的 axeBrowser.exe，工作目录为 axeBrowser.exe 所在的文件夹。 通过 args 来传递调用时的命令行参数，默认为空字符串 ''。 __AXE__.process.execAXEWait(args); 参数 描述 args 命令行参数，默认为 ''。 返回值 调用成功返回 true，其他返回 false。 实例 __AXE__.process.execAXEWait(); __AXE__.process.execAXEWait('-home www.qq.com'); __AXE__.process.execAXEWait(__AXE__.getArgv()); 提示 请注意通过 args 传递命令行参数时的特殊字符处理，例如通过双引号包括参数值，具体请参阅 PowserShell、cmd 的相关文档。 __AXE__.process.exec 定义和用法 异步调用，执行指定的文件。 该执行文件的工作目录为 axeBrowser.exe 所在的文件夹。 通过 args 来传递调用时的命令行参数，默认为空字符串''。 __AXE__.process.exec(file, args); 返回值 调用成功返回 true，其他返回 false。 实例 __AXE__.process.exec('cmd', '/C timeout /t 30'); __AXE__.process.exec('notepad'); 提示 请注意通过 args 传递命令行参数时的特殊字符处理，例如通过双引号包括参数值，具体请参阅 PowserShell、cmd 的相关文档。 __AXE__.process.execWait 定义和用法 同步调用，执行指定的文件，当前应用将等待至该调用执行完毕后方才继续。 该执行文件的工作目录为 axeBrowser.exe 所在的文件夹。 通过 args 来传递调用时的命令行参数，默认为空字符串 ''。 __AXE__.process.execWait(file, args); 返回值 调用成功返回 true，其他返回 false。 实例 __AXE__.process.execWait('cmd', '/C timeout /t 30'); __AXE__.process.execWait('notepad'); 提示 请注意通过 args 传递命令行参数时的特殊字符处理，例如通过双引号包括参数值，具体请参阅 PowserShell、cmd 的相关文档。 "},"example.html":{"url":"example.html","title":"应用范例","keywords":"","body":"应用范例 获取bing每日壁纸并保存 "},"examples/get_bing_bg.html":{"url":"examples/get_bing_bg.html","title":"获取bing每日壁纸并保存","keywords":"","body":"获取bing每日壁纸并保存 将以下内容保存为 get_bing_bg.js，存放在 axeBrowser.exe 所在文件夹： // 设置变量 AXE，方便调用。 // 显示日志，运行开始。 __AXE__.log('>>> START'); // 设置窗口标题 __AXE__.setTitle('获取并保存Bing背景壁纸'); // 获得背景图的网址 var imgurl = document.getElementById('bgLink').href; // 拼凑出保存的文件名：YYYY-MM-DD.jpg var dateToday = new Date(); var filename = dateToday.getFullYear() + '-' + (dateToday.getMonth() + 1) + '-' + dateToday.getDate() + '.jpg'; // 同步调用 curl.exe（Win10 中自带） 来下载并保存图片。 __AXE__.execWait('curl', '\"' + imgurl + '\" -o \"' + filename + '\"'); // 显示日志，运行完毕。 __AXE__.log(' 打开命令行窗口，切换到 axeBrowser.exe 所在文件夹，执行命令： .\\axeBrowser -home \"https://cn.bing.com\" -script \"get_bing_bg.js\" -runas console "},"faq.html":{"url":"faq.html","title":"常见问题与解答","keywords":"","body":"常见问题与解答 axeBrowser 内置的浏览器是什么？ axeBrowser 使用的内置浏览器为 miniblink。miniblink 的首页 http://miniblink.net。 axeBrowser 用什么语言开发的？ axeBrowser 开发所使用的语言和工具是 aardio。aardio 的首页 http://aardio.com。 支持 TypeScript 吗？ miniblink 支持的我们都支持 :)。 支持 WASM 吗？ miniblink 支持的我们都支持 :)。 axeBrowser 是 32 位还是 64 位的？ 32 位。 可否提供 64 位版本？ 不能，受限于我们的开发工具，目前仅能提供 32 位的版本。32 位应用在 64 位系统上运行是没有问题的。而且正常情况下不太可能出现超出 32 位限制的状况吧………… 希望增加功能 请联系我们，我们会综合考虑对需求进行取舍，然后尽快的加入功能。 我们的取舍原则是“尽量的减少和简化 axeBrowser 的体积以及逻辑”。能用 JavaScript 实现的应当都尽量使用 JavaScript 来实现。实在无法满足或者顺带的，才会通过 axeBrowser 来扩展实现。 为什么界面辣么吃藕？！ 嗯……没有美术细胞，脓包也没有。凑合用吧…… "}}