{"./":{"url":"./","title":"简介与说明","keywords":"","body":"axeBrowser 简介与说明 axeBrowser is a browser, automatically, extendedly, easily. axeBrowser 是一个浏览器，可以方便的进行功能扩展和自动化操作。 功能和特点 内置浏览器，提供 JavaScript 运行环境； 提供内置扩展对象供 JavaScript 调用，扩展功能； 多种运行模式（命令行模式、图形应用模式，调试模式）； 用途和作用 axeBrowser 本质上是一个通过浏览器环境提供 javascript 运行环境的脚本执行工具，从某种意义上而言和 node.js 很类似。 一些用户用来自动化操作，提高工作效率； 一些用户用来运行和分发一些 javascript 应用； …… 具体能做什么，取决于您的想象力，您可以在范例中看到一些例子。 已知功能限制 axeBrowser 的功能限制主要源于两个方面，开发工具（32位程序）和内置的浏览器（miniblink）。 仅支持 Windows （xp 以上版本）； 不支持视频、音频； 不支持 flash； 单个进程最大 2G 内存； 风险与安全漏洞 为了更好的实现功能扩展和自动化操作，axeBrowser 没有遵循浏览器的沙盒安全策略。对于安全软件来说，axeBrowser 既然是浏览器，而又存在调用本地资源的行为，那么就存在安全漏洞。因此很多杀毒和防护软件会报告存在病毒木马行为。这是软件的功能和运行机制决定的，并非含病毒。 axeBrowser 提供了脚本运行环境，但无法保证执行的脚本的功能和目的。如果 axeBrowser 执行了存在恶意代码的脚本，那么就会造成安全隐患，可能带来非常严重的后果。 许可与费用 axeBrowser 是免费软件，使用 MIT 协议。再次重申，对于本软件的使用和可能造成的后果请您自行承担。当然，如果您觉得对您有用，愿意请我喝杯茶，那会是一种更大的激励。 使用本软件即表明您已经明确了解风险并对可能造成的后果自行负责。正如用菜刀进行非法行为是使用者的问题，非刀的问题，更不是制造商的问题。 对于软件的使用和可能造成的后果，axeBrowser 不进行任何明示的或者暗示的担保，亦不承担任何责任和义务（无论是法律上的或者是道义上的）。 仅保证，尽可能开发并完善 axeBrowser。 更多信息 软件主页：http://www.axeBrowser.com "},"how_to_run.html":{"url":"how_to_run.html","title":"运行流程","keywords":"","body":"运行流程 axeBrowser 运行流程如下： 程序初始化 打开首页 装载并运行脚本 调用入口函数 系统消息处理 "},"args.html":{"url":"args.html","title":"命令行参数","keywords":"","body":"命令行参数 axeBrowser 在不断的更新和完善中，因此命令行参数也会有修改和增减。请随时关注最新的文档说明。 runas 指定运行模式，默认为 debug。 值 说明 console 命令行模式，仅显示终端字符界面窗口。主要在作为自动化工具时使用。 app 应用模式，图形窗口模式。不显示浏览器功能界面。主要在作为窗口应用时使用。 debug 调试模式，打开图形窗口，提供简单的浏览器功能界面。主要在开发调试时使用。 home 指定自动首页网址，默认为 axeBrowser.com。完成初始化后，axeBrowser 会自动打开这个网址。 script 指定自动装载的 JavaScript 脚本或 JavaScript 脚本列表。（文件名之间以 \",\" 或 \";\" 进行分隔。）默认为空。 打开首页后，axeBrowser 会按照先后顺序读取文件内容，并合并为一段代码在浏览器环境中的匿名函数中执行。 程序会在每个 js 文件内容的末尾加上 “\\n;\\n”，避免问题。 可以利用脚本列表，将不同功能的 JavaScript 代码放在不同的 js 文件中，以达到“模块化”的目的（注：打了双引号的，不是真的模块化）。 举个例子： axeBrowser -script js1.js,js2.js,js3.js js1.js window.external.axe.log('this is js1.js') js2.js window.external.axe.log('this is js2.js'); js3.js window.external.axe.log('this is js3.js'); 最终合并并执行的 JavaScript 代码是： window.external.axe.log('this is js1.js') ; window.external.axe.log('this is js2.js'); ; window.external.axe.log('this is js3.js'); ; entrypoint 指定自动调用的 JavaScript 入口函数的函数名，默认为空。该函数必须在 script 参数指明的脚本中被预先定义。入口函数不支持参数。 举个例子： axeBrowser -script js1.js -entrypoint doStart function fn_test_log(a, b) { window.external.axe.log(a, b); } function doStart() { fn_test_log('111', '222'); } 最终合并并执行的 JavaScript 代码是： function fn_test_log(a, b) { window.external.axe.log(a, b); } function doStart() { fn_test_log('111', '222'); } ; doStart(); referer 指定浏览器访问首页时使用的来源地址（即 header 中的 referer），默认为空。 useragent 指定访问资源时使用的用户代理标识。默认值为：默认内嵌浏览器控件的值 + axeBrowser/版本号。 proxy 指定访问资源时使用的代理服务器地址，默认为空（即不使用代理服务器）。 loglevel 指定日志级别，日志会在独立的终端窗口中显示，默认为 none。axeBrowser 支持以下日志级别：fine、info、debug、warn、error、fatal、none。 wait_mode 指定等待首页加载完毕的模式。axeBrowser 将在首页装载完毕后，进行后继的调用脚本、调用入口函数等工作。默认值为 wait。 值 说明 nowait 不等待。 wait 指定本参数后，可以通过 -wait_url 和 -wait_timeout 来指定等待的网址和超时时间。默认 wait_url 为空，wait_timeout 为 5000 毫秒。 waitdoc 等 document 元素加载完毕。 注意，本参数需要按照具体使用环境来选择。详细说明请参见其他相关文档。举个例子：在很多动态装载的网页中， 虽然网页装载已经完成了，满足 waitdoc 条件，但还需运行 js 代码才有进一步的内容。在这种情况下，就可能需要使用 wait 模式来等待一段时间。 timeout 指定执行超时时间，单位为毫秒，默认为空。运行超过指定时间后将应用自动退出。超时时间从程序初始化完成后开始计算。 "},"jscall.html":{"url":"jscall.html","title":"JavaScript 扩展","keywords":"","body":"JavaScript 扩展 axeBrowser 在不断的更新和完善中，因此内置的扩展也会有修改和增减。在进行修改和增减时，会尽量的保持兼容性，使原有扩展代码无需进行修改。请随时关注最新的文档说明。 axe axeBrowser 为浏览器提供了一个扩展对象 axe。JavaScript 可以通过 window.external.axe 获得，并通过这个扩展对象对功能进行扩展。 可以通过这个扩展对象，判断当前是否属于 axeBrowser 环境并获取详细信息。 例如： var _axe = window.external.axe; if (_axe == null) { alert('请检查：当前运行环境似乎不是 axeBrowser ？'); } else { alert(_axe); } axe.getArgv 获取指定的命令行参数值，如果该命令行参数没有指定，则返回空。 axeBrowser -home qq.com -p1 test; window.external.axe.getArgv('home'); window.external.axe.getArgv('p1'); qq.com test axe.log 在命令行窗口中打印日志，如果命令行窗口没有打开将自动打开。本函数变量为变长，接受多个参数。打印日志时，多个参数之间用制表符分隔。 window.external.axe.log('This line is a log.'); window.external.axe.log('This line is 1st', '2nd', '3rd'); This line is a log. This line is 1st 2nd 3rd axe.exit 立即退出 axeBrowser。 window.external.axe.exit(); axe.exec 异步调用外部程序，调用后将立即返回并执行后继代码，不等待被调用的外部程序执行完毕。 接收两个参数，第一个为要调用的程序名，第二个为其调用参数。 window.external.axe.exec('notepad.exe'); axe.execWait 同步调用外部程序，调用后将等待外部程序执行完毕后，再执行后继代码。 接收两个参数，第一个为要调用的程序名，第二个为其调用参数。 window.external.axe.exitWait('ping', '127.0.0.1'); axe.toString 返回 axe 扩展对象的具体信息。 console.log(window.external.axe); axeBrowser 1.0.0.0 axe.setTitle 设置窗口标题，包括浏览器窗口标题和命令行终端窗口标题。 window.external.axe.setTitle('这是由 JavaScript 设置的窗口标题'); "},"example.html":{"url":"example.html","title":"应用范例","keywords":"","body":"应用范例 sleep axeBrowser -timeout 5000 "},"faq.html":{"url":"faq.html","title":"常见问题与解答","keywords":"","body":"常见问题与解答 axeBrowser 内置的浏览器是什么？ axeBrowser 使用的内置浏览器为 miniblink。miniblink 的首页 http://miniblink.net。 支持 TypeScript 吗？ 和普通浏览器一样，请通过工具将 TS 转为 js 运行。 希望增加功能 请联系我们，我们会综合考虑对需求进行取舍，然后尽快的加入功能。 我们的取舍原则是：能用 JavaScript 实现的应当都尽量使用 JavaScript 来实现。实在无法满足的，才会通过 axeBrowser 来扩展实现。 "}}